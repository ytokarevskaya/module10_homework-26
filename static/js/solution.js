const showConsole = (message, element) => {
    const currentElement = document.getElementById(element);
    currentElement.innerHTML = message;
    console.log(message);
};

// 10.3.1

let inputValue = +prompt("input your value", 0);
console.log(inputValue);
if (!isNaN(inputValue) && inputValue != 0) {
    if (typeof inputValue == "number") {
        if (inputValue % 2 == 0) {
            const message = `‚úÖ The input value ${inputValue} is even`;
            showConsole(message, "console1");
        } else {
            const message = `‚úÖ The input value ${inputValue} is odd`;
            showConsole(message, "console1");
        }
    }
} else {
    const message = "Opps üòµ. Please, input number üî¢ not equal to 0.";
    showConsole(message, "console1");
}

// 10.3.2

const x = "Hello";

switch (typeof x) {
    case "number":
        message = `${x} - number`;
        showConsole(message, "console2");
        break;
    case "boolean":
        message = `${x} - boolean`;
        showConsole(message, "console2");
        break;
    case "string":
        message = `${x} - string`;
        showConsole(message, "console2");
        break;

    default:
        message = `${x} - type is not defined`;
        showConsole(message, "console2");
        break;
}

// 10.4.3

const reversedStr = x.split("").reverse().join("");
showConsole(`${x} ‚û°Ô∏è ${reversedStr}`, "console3");

// 10.4.4

const min = 0;
const max = 100;
const randomValue = Math.floor(Math.random() * (max - min + 1)) + min;
showConsole(`Random value is ${randomValue}`, "console4");

// 10.5.5

const randomArray = [];
let randomArrayElements = "";
for (let i = 0; i < 10; i++) {
    randomArray.push(Math.floor(Math.random() * 10));
}
randomArray.forEach((element) => {
    console.log(element);
    randomArrayElements += element;
});
showConsole(
    `Random array [${randomArray}] elements üîé ${randomArrayElements}`,
    "console5"
);

// 10.5.6

const uniformArray = [1, 1, 1, 1, 1, 1];
const ifUniformArray = uniformArray.every(function (uniformArrayElement) {
    return uniformArrayElement === uniformArray[0];
});
showConsole(
    `Does [${uniformArray}] contain only identical elements? üëâüèæ ${ifUniformArray}`,
    "console6"
);

// –ù–µ —Å–æ–≤—Å–µ–º –≤–µ—Ä–Ω–æ, —Ç.–∫. –µ—Å–ª–∏ –≤ –º–∞—Å—Å–∏–≤–µ –±—É–¥–µ—Ç –∫ –ø—Ä–∏–º–µ—Ä—É —Ç–∞–∫–æ–π –Ω–∞–±–æ—Ä —ç–ª–µ–º–µ–Ω—Ç–æ–≤: 1, 1, "1", —Ç–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–º –±—É–¥–µ—Ç true, —Ç.–µ. —ç–ª–µ–º–µ–Ω—Ç—ã –∏–¥–µ–Ω—Ç–∏—á–Ω—ã, —á—Ç–æ –Ω–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏, —Ç.–∫. –æ–Ω–∏ —Ä–∞–∑–Ω–æ–≥–æ —Ç–∏–ø–∞. –ß—Ç–æ–±—ã —ç—Ç–∞ –ø—Ä–æ–±–ª–µ–º–∞ –Ω–µ –≤–æ–∑–Ω–∏–∫–∞–ª–∞, —Å—Ä–∞–≤–Ω–µ–Ω–∏–µ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å —Å—Ç—Ä–æ–≥–∏–º: === –≤–º–µ—Å—Ç–æ ==. –í—ã—à–µ –∏—Å–ø—Ä–∞–≤–∏–ª–∞

// 10.6.7

const meshedArray = [1, "", null, 4.5, 0, null, 23];

// let totalOddIndexes = 0;
// let totalEvenIndexes = 0;
// let totalZeroElements = 0;
// meshedArray.forEach(function (meshedArrayElement, meshedArrayIndex) {
//     if (meshedArrayIndex % 2 === 0 && meshedArrayElement !== 0) {
//         totalEvenIndexes++;
//     } else if (meshedArrayIndex % 2 !== 0 && meshedArrayElement !== 0) {
//         totalOddIndexes++;
//     } else {
//         totalZeroElements++;
//     }
// });
// showConsole(
//     `Odd indexes: ${totalOddIndexes};
//      Even indexes: ${totalEvenIndexes};
//      Null elements: ${totalZeroElements};
//      Total indexes: ${meshedArray.length}`,
//     "console7"
// );

// –í—ã –∏–Ω–∞—á–µ –ø–æ–Ω—è–ª–∏ –∑–∞–¥–∞–Ω–∏–µ. –ù—É–∂–Ω–æ –±—ã–ª–æ –ø–æ—Å—á–∏—Ç–∞—Ç—å —á–µ—Ç–Ω—ã–µ, –Ω–µ—á–µ—Ç–Ω—ã–µ –∏ –Ω—É–ª–µ–≤—ã–µ —ç–ª–µ–º–µ–Ω—Ç—ã (–Ω–µ –∏–Ω–¥–µ–∫—Å—ã), —Å —É—á–µ—Ç–æ–º —Ç–æ–≥–æ, —á—Ç–æ –≤ –º–∞—Å—Å–∏–≤–µ –º–æ–≥—É—Ç –±—ã—Ç—å –Ω–µ —Ç–æ–ª—å–∫–æ —á–∏—Å–ª–∞, –∞ –∞–±—Å–æ–ª—é—Ç–Ω–æ –ª—é–±—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è. –ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –≤–∞—Ä–∏–∞–Ω—Ç —Ä–µ—à–µ–Ω–∏—è –Ω–∞–ø–∏—Å–∞–ª–∞ –Ω–∏–∂–µ.

let even = 0, odd = 0, zero = 0;

meshedArray.forEach(element => {
    if (typeof element === 'number' && !isNaN(element)) {
        if (element === 0) {
            zero++;
        } else if (element % 2 === 0) {
            even++;
        } else {
            odd++;
        }
    }
})

showConsole(
    `Odd elements: ${odd};
     Even elements: ${even};
     Zero elements: ${zero};`,
    "console7"
);

// 10.7.8

let randomMap = new Map();
let randomMapDecryption = "";
randomMap.set("key1", "value1");
randomMap.set("key2", "value2");
randomMap.set(false, 0);
randomMap.set(true, 1);
randomMap.set([0, 1], [2, 3]);
randomMapKeys = Array.from(randomMap.keys());
randomMapKeys.forEach((key) => {
    randomMapDecryption += `Key: ${key}, Value: ${randomMap.get(key)} | `;
});

showConsole(randomMapDecryption, "console8");
